{
    "name": "CTO Dashboard Platform",
    "version": "2.1.0",
    "description": "SaaS-ready CTO Dashboard with Service Configuration Management",
    "author": "CTO Dashboard Team",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/your-org/ctodashboard"
    },
    "keywords": [
      "cto",
      "dashboard",
      "saas",
      "metrics",
      "aws",
      "github",
      "jira",
      "openai",
      "chatbot",
      "service-configuration",
      "service-types",
      "kiss-principles",
      "dry-principles",
      "infrastructure-monitoring",
      "development-tracking",
      "project-management",
      "ai-services"
    ],
    "main": "integrated_dashboard.py",
    "scripts": {
      "start": "python integrated_dashboard.py",
      "dev": "python integrated_dashboard.py",
      "test": "python -m pytest",
      "deploy": "git push origin master"
    },
    "dependencies": {
      "flask": "2.3.3",
      "werkzeug": "2.3.7",
      "jinja2": "3.1.2",
      "flask-cors": "4.0.0",
      "boto3": "1.35.0",
      "botocore": "1.35.0",
      "requests": "2.31.0",
      "python-dotenv": "1.0.0",
      "langchain": "0.3.27",
      "langchain-openai": "0.3.34",
      "openai": "2.1.0",
      "fastapi": "0.104.1",
      "uvicorn": "0.24.0",
      "sqlalchemy": "2.0.23",
      "python-multipart": "0.0.6",
      "pydantic": ">=2.7.4",
      "pytest": "7.4.3",
      "httpx": "0.25.2",
      "aiohttp": "3.9.1"
    },
    "devDependencies": {},
    "engines": {
      "python": ">=3.8"
    },
    "os": [
      "darwin",
      "linux",
      "win32"
    ],
    "cpu": [
      "x64",
      "arm64"
    ],
    "cursor": {
      "rules": ".cursorrules",
      "ignore": ".cursorignore",
      "context": [
        "README.md",
        "SERVICE-CONFIGURATION-PLAN.md",
        "Makefile",
        "integrated_dashboard.py",
        "backend/metrics_service.py",
        "backend/chatbot_service.py"
      ],
      "patterns": {
        "ui": "Card and Modal patterns with Tailwind CSS",
        "api": "CRUD endpoints with feature flags",
        "services": "BaseService inheritance with KISS principles",
        "testing": "Simple connection testing only"
      },
      "phases": {
        "current": "Phase 2.1: Service Configuration Foundation",
        "next": "Phase 2.2: Service Implementation",
        "priority": "GitHub → Jira → OpenAI → Railway → AWS"
      },
      "enforcement": {
        "preSession": [
          "Read SERVICE-CONFIGURATION-PLAN.md",
          "Check current phase and priorities",
          "Verify feature flags status",
          "Review service patterns"
        ],
        "duringSession": [
          "Follow KISS + DRY principles",
          "Use existing metrics_service.py logic",
          "Test each service thoroughly",
          "Maintain backward compatibility"
        ],
        "postSession": [
          "Update documentation",
          "Test all functionality",
          "Deploy with feature flags",
          "Update phase progress"
        ]
      },
      "serviceTypes": {
        "immediate": [
          "GitHub",
          "Jira", 
          "OpenAI",
          "Railway",
          "AWS"
        ],
        "shortTerm": [
          "Claude",
          "Google Gemini",
          "Vercel",
          "Datadog",
          "Stripe"
        ],
        "mediumTerm": [
          "Azure",
          "Google Cloud",
          "New Relic",
          "Sentry",
          "Slack"
        ],
        "longTerm": [
          "GitLab",
          "Linear",
          "Asana",
          "Microsoft Teams",
          "PayPal"
        ]
      },
      "architecture": {
        "baseClass": "BaseService",
        "categories": [
          "InfrastructureService",
          "DevelopmentService", 
          "ProjectManagementService",
          "AIService"
        ],
        "factory": "ServiceFactory",
        "manager": "ServiceManager",
        "testing": "Simple connection testing only"
      },
      "principles": {
        "kiss": "Keep implementations simple and stable",
        "dry": "Don't repeat existing functionality",
        "backwardCompatible": "Never break existing functionality",
        "featureFlagged": "All new features behind flags",
        "incremental": "Build and test each service individually"
      }
    },
    "config": {
      "port": 3001,
      "host": "0.0.0.0",
      "debug": false,
      "cors": true,
      "featureFlags": {
        "multi_tenancy": false,
        "workstream_management": false,
        "service_config_ui": true,
        "advanced_billing": false,
        "database_storage": false
      }
    },
    "deployment": {
      "target": "railway",
      "healthCheck": "/health",
      "startCommand": "python integrated_dashboard.py",
      "environment": {
        "ENABLE_SERVICE_CONFIG_UI": "true",
        "ENABLE_MULTI_TENANCY": "false",
        "ENABLE_WORKSTREAM_MGMT": "false",
        "ENABLE_BILLING": "false",
        "ENABLE_DATABASE": "false"
      }
    },
    "monitoring": {
      "enabled": false,
      "note": "Deferred to future phases - keep simple for now"
    },
    "documentation": {
      "main": "README.md",
      "servicePlan": "SERVICE-CONFIGURATION-PLAN.md",
      "architecture": "ARCHITECTURE-OVERVIEW.md",
      "makefile": "Makefile",
      "commands": [
        "make help",
        "make track", 
        "make services",
        "make status"
      ]
    }
  }